apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config-ui
data:
  envoy.yaml: |
    admin:
      access_log_path: "/dev/null"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901
    static_resources:
      listeners:
        - name: ui_listener
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 10000
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: ui
                    codec_type: AUTO
                    route_config:
                      virtual_hosts:
                        - name: ui
                          domains: ["*"]
                          routes:
                            - match: { prefix: "/" }
                              route: { cluster: ui_service }
                    http_filters:
                      - name: envoy.filters.http.lua
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                          inline_code: |
                            local json = require("cjson")
                            function envoy_on_request(request_handle)
                              local headers = request_handle:headers()
                              local body = request_handle:body():getBytes(0, request_handle:body():length()) or ""
                              local log_data = json.encode({
                                type = "request",
                                method = headers:get(":method"),
                                path = headers:get(":path"),
                                headers = headers:asTable(),
                                body = body
                              })
                              request_handle:log(log_data)
                            end

                            function envoy_on_response(response_handle)
                              local headers = response_handle:headers()
                              local body = response_handle:body():getBytes(0, response_handle:body():length()) or ""
                              local log_data = json.encode({
                                type = "response",
                                status = headers:get(":status"),
                                headers = headers:asTable(),
                                body = body
                              })
                              response_handle:log(log_data)
                            end
                      - name: envoy.filters.http.router
      clusters:
        - name: ui_service
          connect_timeout: 5s
          type: LOGICAL_DNS
          load_assignment:
            cluster_name: ui_service
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: ui-service
                          port_value: 80
